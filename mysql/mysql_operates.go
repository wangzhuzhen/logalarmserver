package mysql

import (
	"fmt"
	"database/sql"
	_ "github.com/go-sql-driver/mysql"
	"github.com/wangzhuzhen/logalarmserver/types"
)

/* 连接Mysql数据库 */
func ConnectMYSQL() (*sql.DB, error) {
	/*DSN数据源名称
	  [username[:password]@][protocol[(address)]]/dbname[?param1=value1¶mN=valueN]
	  user@unix(/path/to/socket)/dbname
	  user:password@tcp(localhost:5555)/dbname?charset=utf8&autocommit=true
	  user:password@tcp([de:ad:be:ef::ca:fe]:80)/dbname?charset=utf8mb4,utf8
	  user:password@/dbname
	  无数据库: user:password@/
	*/
	db, err := sql.Open("mysql", "root:123456@tcp(127.0.0.1:3306)/?charset=utf8") //第一个参数为驱动名
	if err != nil {
		return nil, err
	}
	return db, nil
}

/* 创建用户数据库 */
func CreteDatabase(db *sql.DB, dbname string) {

	_, err := db.Query("create database if not exists "  + dbname)
	checkErr(err)
}

/* 创建日志报警规则表 */
func CreteTable_Rule(db *sql.DB, dbname string) {
	_, err := db.Query("create table if not exists  "+ dbname + ".rules(ruleOwner varchar(255), ruleName varchar(255), keyword varchar(255), keywordIndex int);")
	checkErr(err)
}

/* 日志报警规则表中插入数据 */
func Insert_Rule(db *sql.DB, dbname string, rule types.Rule) {

	rows, err := db.Query("select * from "+ dbname + ".rules where ruleOwner='" + rule.RuleOwner + "' and ruleName='" + rule.RuleName + "'")
	if err != nil {
		fmt.Println("Can not verify the existences of the rule in table rules, refuse to insert the new data.")
		return
	}
	if  rows.Next() {
		fmt.Println("Existed rule for ruleOwner=" + rule.RuleOwner + " ruleName=" + rule.RuleName + ", refuse to insert new one, try update it.")
		return
	}

	stmt, err := db.Prepare("INSERT " + dbname + ".rules SET ruleOwner=?,ruleName=?,keyword=?,keywordIndex=?")
	checkErr(err)

	res, err := stmt.Exec(rule.RuleOwner, rule.RuleName, rule.KeyWord, rule.KeywordIndex)
	checkErr(err)

	id, err := res.LastInsertId() //LastInsertId returns the integer generated by the database in response to a command.
	checkErr(err)

	fmt.Println("Last insert id :", id)
}

/* 日志报警规则表中更新指定用户指定规则的数据 */
func Update_Rule(db *sql.DB, dbname string, rule types.Rule ) {

	stmt, err := db.Prepare("update " + dbname + ".rules set keyword=?,keywordIndex=? where ruleOwner=? and ruleName=?")
	checkErr(err)

	res, err := stmt.Exec(rule.KeyWord, rule.KeywordIndex, rule.RuleOwner, rule.RuleName)
	checkErr(err)

	affect, err := res.RowsAffected() //RowsAffected returns the number of rows affected by an
	// update, insert, or delete.
	checkErr(err)

	fmt.Println("受影响的行数 : ", affect)
	if (affect == 0) {
		fmt.Println("No matched rule in table rules to update for [ruleOwner=" +rule.RuleOwner +" ruleName=" + rule.RuleName +"] or matched rule not necessary to update")
	}
}

/* 查看日志报警规则表 */
func Select_Rules(db *sql.DB, dbname string)  ([]types.Rule, error) {

	var rules []types.Rule
	rows, err := db.Query("select * from "+ dbname + ".rules")
	if err != nil {
		return nil, err
	}

	for rows.Next() {
		var ruleOwner     string
		var ruleName      string
		var keyword       string
		var keywordIndex  int

		err := rows.Scan(&ruleOwner, &ruleName, &keyword, &keywordIndex)
		checkErr(err)
		temp := types.Rule{RuleOwner: ruleOwner, RuleName: ruleName, KeyWord: keyword, KeywordIndex: keywordIndex}
		rules = append(rules,temp)

		/*
		fmt.Printf("[ruleowner]: %s  [rulename]: %s  [keyword]: %s  [keywordindex]: %d  %s\n", ruleOwner, ruleName, keyword, keywordIndex)
		*/
	}
	return rules,nil
}

/* 查看指定用户的日志报警规则表 */
func Select_UserRules(db *sql.DB, dbname string, user string )  ([]types.Rule, error) {

	var rules []types.Rule
	rows, err := db.Query("select * from "+ dbname + ".rules where ruleOwner='" + user+"'")
	if err != nil {
		return nil, err
	}

	for rows.Next() {
		var ruleOwner     string
		var ruleName      string
		var keyword       string
		var keywordIndex  int

		err := rows.Scan(&ruleOwner, &ruleName, &keyword, &keywordIndex)
		checkErr(err)
		temp := types.Rule{RuleOwner: ruleOwner,RuleName: ruleName, KeyWord: keyword, KeywordIndex: keywordIndex}
		rules = append(rules,temp)

		/*
		fmt.Printf("[ruleowner]: %s  [rulename]: %s  [keyword]: %s  [keywordindex]: %d \n", ruleOwner, ruleName, keyword, keywordIndex)
		*/
	}
	return rules,nil
}

/* 删除报警规则表中指定用户指定规则名称的数据 */
func DeleteRule(db *sql.DB, dbname string, drule types.RuleUser) {

	stmt, err := db.Prepare("delete from "+dbname + ".rules where ruleOwner=? and ruleName=?")
	checkErr(err)

	res, err := stmt.Exec(drule.RuleOwner, drule.RuleName)
	checkErr(err)

	affect, err := res.RowsAffected()
	checkErr(err)
	if (affect == 0) {
		fmt.Println("No matched rule to delete for [ruleOwner=" +drule.RuleOwner +" ruleName=" + drule.RuleName +"]")
	}

	fmt.Println("删除的行数:", affect)
}

/* 创建日志报警任务表 */
func CreteTable_Topology(db *sql.DB, dbname string) {

	_, err := db.Query("create table if not exists  "+ dbname + ".topologys(topologyOwner varchar(255), topologyName varchar(255), appName varchar(255), " +
		"keyword varchar(255), keywordIndex int, timeWindow int, thresholdNum int, emailList varchar(2048));")
	checkErr(err)
}

/* 日志报警任务表中插入数据 */
func Insert_Topology(db *sql.DB, dbname string, topology types.Topology) {

	rows, err := db.Query("select * from "+ dbname + ".topologys where topologyOwner='" + topology.TopologyOwner + "' and topologyName='" + topology.TopologyName + "'")
	if err != nil {
		fmt.Println("Can not verify the existences of the topology in table topologys, refuse to insert the new data.")
		return
	}
	if  rows.Next() {
		fmt.Println("Existed topology for topologyOwner=" + topology.TopologyOwner + " topologyName=" + topology.TopologyName + ", refuse to insert new one, try update it.")
		return
	}

	stmt, err := db.Prepare("INSERT " + dbname + ".topologys SET topologyOwner=?,topologyName=?,appName=?,keyword=?,keywordIndex=?,timeWindow=?,thresholdNum=?,emailList=?")
	checkErr(err)

	res, err := stmt.Exec(topology.TopologyOwner, topology.TopologyName, topology.AppName, topology.KeyWord, topology.KeywordIndex, topology.TimeWindow, topology.ThresholdNum, topology.EmailList)
	checkErr(err)

	id, err := res.LastInsertId() //LastInsertId returns the integer generated by the database in response to a command.
	checkErr(err)

	fmt.Println("Last insert id :", id)
}


/* 查看日志报警任务表 */
func Select_Topologys(db *sql.DB, dbname string) ([]types.Topology, error) {

	var topologys []types.Topology
	rows, err := db.Query("select * from "+ dbname + ".topologys")
	if err != nil {
		checkErr(err)
	}

	for rows.Next() {
		var topologyOwner string
		var topologyName  string
		var appName       string
		var keyword       string
		var keywordIndex  int
		var timeWindow    int
		var thresholdNum  int
		var emailList     string

		err := rows.Scan(&topologyOwner,&topologyName, &appName, &keyword, &keywordIndex, &timeWindow, &thresholdNum, &emailList)
		checkErr(err)

		temp := types.Topology{TopologyOwner: topologyOwner, TopologyName: topologyName, AppName: appName, KeyWord: keyword, KeywordIndex: keywordIndex, TimeWindow: timeWindow, ThresholdNum: thresholdNum, EmailList: emailList}
		topologys = append(topologys,temp)

		/*
		fmt.Printf("[topologyowner]: %s  [topologyname]: %s  [appname]: %s  [keyword]: %s  [keywordindex]: %d  [timewindow]: %d  " +
			"[thresholdnum]: %d  [maillist]: %s\n", topologyOwner, topologyName, appName, keyword, keywordIndex, timeWindow, thresholdNum, emailList)
		*/
	}
	return topologys, nil
}

/* 查看日志报警任务表中指定用户的报警任务 */
func Select_UserTopologys(db *sql.DB, dbname string, user string )  ([]types.Topology, error) {

	var topologys []types.Topology
	rows, err := db.Query("select * from "+ dbname + ".topologys where topologyOwner='" + user + "'")
	if err != nil {
		return nil, err
	}

	for rows.Next() {
		var topologyOwner string
		var topologyName  string
		var appName       string
		var keyword       string
		var keywordIndex  int
		var timeWindow    int
		var thresholdNum  int
		var emailList     string

		err := rows.Scan(&topologyOwner,&topologyName, &appName, &keyword, &keywordIndex, &timeWindow, &thresholdNum, &emailList)
		checkErr(err)

		temp := types.Topology{TopologyOwner: topologyOwner, TopologyName: topologyName, AppName: appName, KeyWord: keyword, KeywordIndex: keywordIndex, TimeWindow: timeWindow, ThresholdNum: thresholdNum, EmailList: emailList}
		topologys = append(topologys,temp)

		/*
		fmt.Printf("[topologyowner]: %s  [topologyname]: %s  [appname]: %s  [keyword]: %s  [keywordindex]: %d  [timewindow]: %d  " +
			"[thresholdnum]: %d  [maillist]: %s\n", topologyOwner, topologyName, appName, keyword, keywordIndex, timeWindow, thresholdNum, emailList)
		*/
	}
	return topologys, nil
}


/* 日志报警任务表中更新指定用户指定规则的数据 */
func Update_Topology(db *sql.DB, dbname string, topology types.Topology) {

	stmt, err := db.Prepare("update " + dbname + ".topologys set appName=?,keyword=?,keywordIndex=?,timeWindow=?,thresholdNum=?,emailList=? where topologyOwner=? and topologyName=?")
	checkErr(err)

	res, err := stmt.Exec(topology.AppName, topology.KeyWord, topology.KeywordIndex, topology.TimeWindow, topology.ThresholdNum, topology.EmailList, topology.TopologyOwner, topology.TopologyName)
	checkErr(err)

	affect, err := res.RowsAffected() //RowsAffected returns the number of rows affected by an
	// update, insert, or delete.
	checkErr(err)

	fmt.Println("受影响的行数 : ", affect)
	if (affect == 0) {
		fmt.Println("No matched topology in table topologys to update for [topologyOwner=" +topology.TopologyOwner +" topologyName=" + topology.TopologyName +"] or matched topology not necessary to update")
	}
}

/* 删除报警任务表中指定用户指定任务名称的数据 */
func DeleteTopology(db *sql.DB, dbname string, dtopology types.TopologyUser) {

	stmt, err := db.Prepare("delete from "+dbname + ".topologys where topologyOwner=? and topologyName=?")
	checkErr(err)

	res, err := stmt.Exec(dtopology.TopologyOwner, dtopology.TopologyName)
	checkErr(err)

	affect, err := res.RowsAffected()
	checkErr(err)
	if (affect == 0) {
		fmt.Println("No matched topology in table topologys to delete for [topologyOwner=" +dtopology.TopologyOwner +" topologyName=" + dtopology.TopologyName +"]")
	}

	fmt.Println("删除的行数:", affect)
}

func checkErr(errMasg error) {
	if errMasg != nil {
		panic(errMasg)
	}
}

/* 选择报警任务表中指定用户指定任务名称的数据用于提交报警 */
func Select_SubmitTopology(db *sql.DB, dbname string, user types.TopologyUser)  ([]types.Topology, error) {

	var topologys []types.Topology
	rows, err := db.Query("select * from "+ dbname + ".topologys where topologyOwner='" + user.TopologyOwner + "' and topologyName='" + user.TopologyName + "'")
	if err != nil {
		return nil, err
	}

	for rows.Next() {
		var topologyOwner string
		var topologyName  string
		var appname       string
		var keyword       string
		var keywordIndex  int
		var timeWindow    int
		var thresholdNum  int
		var emailList     string

		err := rows.Scan(&topologyOwner,&topologyName, &appname, &keyword, &keywordIndex, &timeWindow, &thresholdNum, &emailList)
		checkErr(err)

		temp := types.Topology{TopologyOwner: topologyOwner, TopologyName: topologyName, AppName: appname, KeyWord: keyword, KeywordIndex: keywordIndex, TimeWindow: timeWindow, ThresholdNum: thresholdNum, EmailList: emailList}
		topologys = append(topologys,temp)

		/*
		fmt.Printf("[topologyowner]: %s  [topologyname]: %s  [appname]: %s  [keyword]: %s  [keywordindex]: %d  [timewindow]: %d  " +
			"[thresholdnum]: %d  [maillist]: %s\n", topologyOwner, topologyName, appName, keyword, keywordIndex, timeWindow, thresholdNum, emailList)
		*/
	}
	return topologys, nil
}

/*
func printResult(query *sql.Rows) {
	column, _ := query.Columns()              //读出查询出的列字段名
	values := make([][]byte, len(column))     //values是每个列的值，这里获取到byte里
	scans := make([]interface{}, len(column)) //因为每次查询出来的列是不定长的，用len(column)定住当次查询的长度
	for i := range values {                   //让每一行数据都填充到[][]byte里面
		scans[i] = &values[i]
	}
	results := make(map[int]map[string]string) //最后得到的map
	i := 0
	for query.Next() { //循环，让游标往下移动
		if err := query.Scan(scans...); err != nil { //query.Scan查询出来的不定长值放到scans[i] = &values[i],也就是每行都放在values里
			fmt.Println(err)
			return
		}
		row := make(map[string]string) //每行数据
		for k, v := range values {     //每行数据是放在values里面，现在把它挪到row里
			key := column[k]
			row[key] = string(v)
		}
		results[i] = row //装入结果集中
		i++
	}
	for k, v := range results { //查询出来的数组
		fmt.Println(k, v)
	}
}
*/


